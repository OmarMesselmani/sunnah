"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/add-hadith/page",{

/***/ "(app-pages-browser)/./src/lib/gemini-api.ts":
/*!*******************************!*\
  !*** ./src/lib/gemini-api.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeIsnad: function() { return /* binding */ analyzeIsnad; },\n/* harmony export */   generateSearchQueries: function() { return /* binding */ generateSearchQueries; }\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(app-pages-browser)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\n// تهيئة الواجهة البرمجية\nconst API_KEY = \"AIzaSyBgUatwjxbIxY7ve9Fy-LzJ07ACbj9mofc\" || 0;\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(API_KEY);\nconst modelName = \"gemini-1.5-flash\";\n/**\r\n * تحليل سند الحديث واستخراج الرواة منه باستخدام نموذج Gemini 1.5 Flash\r\n * ويتم تعديل الترتيب بحيث يظهر الصحابي أولًا (رقم 1)\r\n * @param isnad - نص السند المراد تحليله\r\n * @returns مصفوفة من الرواة المستخرجين من السند\r\n */ async function analyzeIsnad(isnad) {\n    try {\n        const model = genAI.getGenerativeModel({\n            model: modelName\n        });\n        // إنشاء نص التعليمات مع نموذج للمخرجات بصيغة JSON\n        const prompt = \"\\n      أنت خبير في تحليل أسانيد الحديث النبوي الشريف.\\n      قم بتحليل سند الحديث التالي واستخراج أسماء الرواة وترتيبهم في السند:\\n      \\n      \".concat(isnad, '\\n      \\n      يرجى تقديم المخرجات بتنسيق JSON كالتالي:\\n      [\\n        {\\n          \"name\": \"اسم الراوي كاملا\",\\n          \"order\": رقم ترتيب الراوي في السند (1 للأول وهكذا),\\n          \"narrationType\": \"صيغة الرواية (مثل: حدثنا، أخبرنا، عن، قال...)\"\\n        }\\n      ]\\n      \\n      ملاحظات مهمة:\\n      1. استخرج اسم الراوي كاملًا كما ورد في النص مع إزالة أي علامات ترقيم أو كلمات إضافية\\n      2. الأمر يبدأ بمن تلقى الحديث أولًا (الراوي الأقرب للمحدث) وينتهي بالصحابي (آخر راوٍ في السند)\\n      3. تجاهل المحدث نفسه مثل البخاري أو مسلم في أول السند\\n      4. أضف صيغة الرواية (حدثنا، أخبرنا، عن، ...) إن وجدت\\n      5. تأكد من أن المخرجات بصيغة JSON صالحة تمامًا\\n      \\n      أعد النتائج فقط بصيغة JSON بدون تعليقات إضافية.\\n    ');\n        // إرسال الطلب إلى نموذج Gemini\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const text = response.text();\n        // استخراج مصفوفة JSON من النص المُرجع\n        const jsonMatch = text.match(/\\[[\\s\\S]*\\]/);\n        if (!jsonMatch) {\n            throw new Error(\"لم يتم العثور على نتائج JSON في استجابة النموذج\");\n        }\n        // تحليل JSON\n        const originalNarrators = JSON.parse(jsonMatch[0]);\n        // عكس ترتيب الرواة (لجعل الصحابي في البداية)\n        const reversedNarrators = [\n            ...originalNarrators\n        ].reverse();\n        // إعادة تعيين أرقام الترتيب\n        return reversedNarrators.map((narrator, index)=>({\n                ...narrator,\n                order: index + 1\n            }));\n    } catch (error) {\n        console.error(\"Error analyzing isnad with Gemini:\", error);\n        throw new Error(\"فشل في تحليل السند: \" + (error instanceof Error ? error.message : \"خطأ غير معروف\"));\n    }\n}\n/**\r\n * توليد استعلامات بحث متعددة لاسم الراوي لتحسين نتائج البحث\r\n */ function generateSearchQueries(narrator) {\n    const name = narrator.name;\n    const queries = [\n        name\n    ];\n    // إضافة استعلامات مختلفة لتحسين البحث\n    const parts = name.trim().split(\" \");\n    if (parts.length > 1) {\n        // إضافة الجزء الأول والأخير من الاسم\n        queries.push(parts[0] + \" \" + parts[parts.length - 1]);\n        // إضافة جزء \"ابن/بن\" للبحث إن وجد\n        const ibnIndex = parts.findIndex((part)=>part === \"بن\" || part === \"ابن\");\n        if (ibnIndex > 0 && ibnIndex < parts.length - 1) {\n            queries.push(parts[ibnIndex - 1] + \" بن \" + parts[ibnIndex + 1]);\n        }\n    }\n    return queries;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/gemini-api.ts\n"));

/***/ })

});